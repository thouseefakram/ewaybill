import pdfplumber
import pandas as pd
import json
from collections import defaultdict
from django.shortcuts import get_object_or_404
from rest_framework import status
from rest_framework.decorators import api_view
from rest_framework.response import Response
from .models import EWayBill
from .serializers import EWayBillUploadSerializer, EWayBillDataSerializer

def process_ewaybill_pdf_sync(pdf_file_path):
    """
    Synchronous function to process PDF and extract data
    """
    try:
        all_text_lines = []
        tables = []

        with pdfplumber.open(pdf_file_path) as pdf:
            for page in pdf.pages:
                # Extract text
                text = page.extract_text()
                if text:
                    lines = [line.strip() for line in text.split('\n') if line.strip()]
                    all_text_lines.extend(lines)
                
                # Extract tables
                page_tables = page.extract_tables()
                for table in page_tables:
                    if table and len(table) > 1:
                        df = pd.DataFrame(table[1:], columns=table[0])
                        tables.append(df)

        # Extract metadata from text lines
        metadata = {}
        for line in all_text_lines:
            if ':' in line:
                parts = line.split(':', 1)
                key = parts[0].strip()
                value = parts[1].strip()
                if key and value:
                    metadata[key] = value

        # Combine metadata with table data
        combined_rows = []
        for df in tables:
            for _, row in df.iterrows():
                combined_row = metadata.copy()
                combined_row.update(row.to_dict())
                combined_rows.append(combined_row)

        # Merge all data
        merged_dict = defaultdict(list)
        for row in combined_rows:
            for key, value in row.items():
                if pd.notna(value) and value not in [None, '']:
                    merged_dict[key].append(str(value))

        # Deduplicate values
        for key in merged_dict:
            unique_vals = list(dict.fromkeys(merged_dict[key]))
            merged_dict[key] = unique_vals[0] if len(unique_vals) == 1 else unique_vals

        # Clean data
        cleaned_dict = {}
        for key, value in merged_dict.items():
            clean_key = key.replace("\n", " ").strip()
            if isinstance(value, list):
                clean_value = [v.replace("\n", " ").strip() if isinstance(v, str) else v for v in value]
            elif isinstance(value, str):
                clean_value = value.replace("\n", " ").strip()
            else:
                clean_value = value
            cleaned_dict[clean_key] = clean_value

        # Process specific fields
        process_ewaybill_fields(cleaned_dict)
        
        # Calculate price
        calculate_price(cleaned_dict)
        
        # Final cleanup
        final_cleanup(cleaned_dict)
        
        return cleaned_dict
        
    except Exception as e:
        print(f"Processing failed: {e}")
        return None

def process_ewaybill_fields(cleaned_dict):
    """Process specific eWayBill fields"""
    # eWay Bill No processing
    eway_info = cleaned_dict.get("eWay Bill No")
    if isinstance(eway_info, str):
        parts = eway_info.split("Generated Date:")
        if len(parts) == 2:
            cleaned_dict["eWay Bill No"] = parts[0].strip()
            date_parts = parts[1].split("Generated By:")
            if len(date_parts) == 2:
                cleaned_dict["Generated Date"] = date_parts[0].strip()
                cleaned_dict["Generated By"] = date_parts[1].strip()

    # Mode processing
    mode_info = cleaned_dict.get("Mode")
    if isinstance(mode_info, list):
        for item in mode_info:
            if "Approx Distance:" in item:
                parts = item.split("Approx Distance:")
                if len(parts) == 2:
                    cleaned_dict["Mode"] = parts[0].strip()
                    cleaned_dict["Approx Distance"] = parts[1].strip()
            elif item.lower() in ["road", "rail", "air", "ship"]:
                cleaned_dict["Mode"] = item.strip()


    type_info = cleaned_dict.get("Type")
    if isinstance(type_info, str):
        # Example format:
        # "Outward - Supply Document Details: Tax Invoice - ST-165 - Transaction type: Regular"
        if "Document Details:" in type_info:
            parts = type_info.split("Document Details:")
            cleaned_dict["Type"] = parts[0].strip()

            remaining = parts[1].strip()
            if "Transaction type:" in remaining:
                doc_parts = remaining.split("Transaction type:")
                cleaned_dict["Document Details"] = doc_parts[0].strip()
                cleaned_dict["Transaction Type"] = doc_parts[1].strip()
            else:
                cleaned_dict["Document Details"] = remaining


    transporter_info = cleaned_dict.get("Transporter ID & Name")
    if isinstance(transporter_info, str) and "Transporter Doc. No & Date" in transporter_info:
        parts = transporter_info.split("Transporter Doc. No & Date")
        cleaned_dict["Transporter ID & Name"] = parts[0].strip(" :")

        if len(parts) > 1:
            doc_details = parts[1].strip(" :")
            if "&" in doc_details:
                doc_no, doc_date = [p.strip() for p in doc_details.split("&", 1)]
                cleaned_dict["Transporter Doc No"] = doc_no
                cleaned_dict["Transporter Doc Date"] = doc_date
            else:
                cleaned_dict["Transporter Doc No & Date"] = doc_details

def calculate_price(cleaned_dict):
    """Calculate price from quantity and taxable amount"""
    try:
        qty_vals = cleaned_dict.get("Quantity", [])
        tax_vals = cleaned_dict.get("Taxable Amount Rs.", [])

        if not isinstance(qty_vals, list):
            qty_vals = [qty_vals]
        if not isinstance(tax_vals, list):
            tax_vals = [tax_vals]

        prices = []
        for q, t in zip(qty_vals, tax_vals):
            try:
                quantity_str = str(q).split()[0] if q else "0"
                quantity = float(quantity_str.replace(",", ""))
                taxable_amount = float(str(t).replace(",", "")) if t else 0

                if quantity > 0:
                    prices.append(round(taxable_amount / quantity, 2))
                else:
                    prices.append(None)
            except:
                prices.append(None)

        if prices:
            cleaned_dict["Price"] = prices[0] if len(prices) == 1 else prices
    except Exception as e:
        cleaned_dict["Price"] = None

def final_cleanup(cleaned_dict):
    """Final data cleanup"""
    for key in ["From", "To"]:
        if key in cleaned_dict:
            val = cleaned_dict[key]
            if isinstance(val, list) and len(val) > 0:
                cleaned_dict[key] = [val[-1]]
    
    # Ensure all values are lists for consistency
    for key, value in cleaned_dict.items():
        if not isinstance(value, list):
            cleaned_dict[key] = [value] if value is not None else []

@api_view(['POST'])
def upload_ewaybill(request):
    """
    Endpoint 1: Upload PDF file and return extracted data immediately
    """
    if request.method == 'POST':
        serializer = EWayBillUploadSerializer(data=request.data)
        
        if serializer.is_valid():
            # Save the uploaded file first
            ewaybill = serializer.save()
            
            try:
                # Process PDF synchronously
                extracted_data = process_ewaybill_pdf_sync(ewaybill.pdf_file.path)
                
                if extracted_data:
                    # Update the database record
                    ewaybill.extracted_data = extracted_data
                    ewaybill.status = 'completed'
                    ewaybill.save()
                    
                    # Return immediate response with extracted data
                    return Response({
                        'id': ewaybill.id,
                        'status': 'completed',
                        'extracted_data': extracted_data,
                        'message': 'PDF processed successfully'
                    }, status=status.HTTP_201_CREATED)
                else:
                    ewaybill.status = 'failed'
                    ewaybill.save()
                    return Response({
                        'id': ewaybill.id,
                        'status': 'failed',
                        'message': 'PDF processing failed'
                    }, status=status.HTTP_400_BAD_REQUEST)
                    
            except Exception as e:
                ewaybill.status = 'failed'
                ewaybill.save()
                return Response({
                    'id': ewaybill.id,
                    'status': 'failed',
                    'message': f'Error processing PDF: {str(e)}'
                }, status=status.HTTP_400_BAD_REQUEST)
        
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

@api_view(['GET'])
def get_ewaybill_data(request, pk=None):
    """
    Endpoint 2: Get extracted data by ID or list all
    """
    if pk:
        # Get specific eWayBill by primary key
        ewaybill = get_object_or_404(EWayBill, id=pk)
        serializer = EWayBillDataSerializer(ewaybill)
        return Response(serializer.data)
    else:
        # Get all eWayBills
        ewaybills = EWayBill.objects.all().order_by('-uploaded_at')
        serializer = EWayBillDataSerializer(ewaybills, many=True)
        return Response(serializer.data)